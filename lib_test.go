package bertlv

import (
	"encoding/binary"
	"fmt"
	"testing"
)

var testdata = []byte{
	0x89, 0x06, 0x36, 0x32, 0x31, 0x30, 0x32, 0x39, 0x1f, 0x03, 0x0c, 0x37, 0x31, 0x37, 0x32, 0x31, 0x34, 0x38, 0x36,
	0x38, 0x30, 0x31, 0x31, 0x9f, 0x1c, 0x08, 0x50, 0x30, 0x31, 0x30, 0x35, 0x39, 0x39, 0x34, 0x4f, 0x07, 0xa0, 0x00,
	0x00, 0x00, 0x03, 0x10, 0x10, 0x50, 0x0a, 0x56, 0x69, 0x73, 0x61, 0x20, 0x44, 0x65, 0x62, 0x69, 0x74, 0x95, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x26, 0x04, 0x56, 0x49, 0x53, 0x41, 0x1f, 0x08, 0x03, 0x14, 0x37, 0x46, 0x1f,
	0x09, 0x02, 0x06, 0x21, 0x5a, 0x08, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0x96, 0x03, 0x5f, 0x24, 0x03, 0x21, 0x01,
	0x31, 0x1f, 0x0a, 0x04, 0xab, 0x3e, 0x0d, 0x00, 0x1f, 0x1d, 0x07, 0x20, 0x17, 0x06, 0x21, 0x14, 0x37, 0x46, 0x1f,
	0x06, 0x02, 0x02, 0x00, 0x1f, 0x6e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x9f, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1f, 0x1e, 0x0c, 0x39, 0x39, 0x39, 0x39, 0x39,
	0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x2a, 0x02, 0x04, 0x98, 0x1f, 0x6c, 0x01, 0x00, 0x1f, 0x81, 0x70,
	0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x71, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x1f, 0x81, 0x72, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1f, 0x81, 0x73, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x74, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x75, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x76, 0x0d,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x77, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x1f, 0x06, 0x02, 0x02, 0x00, 0x1f, 0x47, 0x10, 0x30, 0x31, 0x34, 0x39, 0x35, 0x30, 0x30, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x9f, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x5f, 0x20, 0x00,
	0x1f, 0x0b, 0x04, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x29, 0x01, 0x01,
}

func printTLV(tlv []byte) int {
	var (
		t, l  []byte
		lUint uint64
		offs  int
	)

	if tlv[0]&31 != 31 {
		t = []byte{tlv[0]}
	} else {
		t = make([]byte, 1, 8)
		t[0] = tlv[0]
		for i := 1; i < len(tlv); i++ {
			t = append(t, tlv[i])
			if tlv[i]&128 != 128 {
				break
			}
		}
	}
	offs = len(t)

	switch {
	case tlv[offs] < 0x80:
		l = []byte{tlv[offs]}
		lUint = uint64(tlv[offs])
	case tlv[offs] > 0x80:
		ll := tlv[offs] - 0x80
		switch {
		case ll > 8:
			fmt.Println("Length overflow!!!")
			return 0
		case ll > 4:
			l = make([]byte, 8)
			copy(l, tlv[offs+8-int(tlv[offs]):offs+8])
			lUint = binary.BigEndian.Uint64(l)
		case ll > 2:
			l = make([]byte, 4)
			copy(l, tlv[offs:])
			copy(l, tlv[offs+4-int(tlv[offs]):offs+4])
			lUint = uint64(binary.BigEndian.Uint32(l))
		case ll > 1:
			l = make([]byte, 2)
			copy(l, tlv[offs:])
			copy(l, tlv[offs+2-int(tlv[offs]):offs+2])
			lUint = uint64(binary.BigEndian.Uint16(l))
		default:
			l = []byte{tlv[offs]}
			lUint = uint64(tlv[offs])
		}
	case tlv[offs] == 0x80:
		fmt.Println("!!! 0x80 !!!")
		return 0
	}
	offs += len(l)

	fmt.Printf("\n[% 02X]\n", tlv[:offs])
	fmt.Printf("T=0x%02X(%08b)\n", t, t)
	fmt.Printf("L=0x%02X(%d)\n", l, lUint)
	fmt.Printf("V=%s\n", tlv[offs:offs+int(lUint)])
	fmt.Printf("V=[% 02X]\n", tlv[offs:offs+int(lUint)])
	return offs + int(lUint)
}

func printTLV2(p []byte) int {
	ln, tag, val, err := Decode(p[:])
	fmt.Printf("\n[% 02X]\n", p[:ln])
	fmt.Printf("T=0x%02X\n", tag)
	fmt.Printf("V=%s\n", val)
	fmt.Printf("E=%v\n", err)
	return ln
}

func TestDecode(t *testing.T) {
	dump := make([]byte, len(testdata))
	for i, b := range testdata {
		if b < 32 || b > 127 {
			dump[i] = '.'
		} else {
			dump[i] = testdata[i]
		}
	}
	fmt.Println(string(dump))

	n := 0
	k := 0

	n += printTLV(testdata[n:])
	k += printTLV2(testdata[k:])

	n += printTLV(testdata[n:])
	k += printTLV2(testdata[k:])

	n += printTLV(testdata[n:])
	k += printTLV2(testdata[k:])

	n += printTLV(testdata[n:])
	k += printTLV2(testdata[k:])

	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
	n += printTLV(testdata[n:])
}
