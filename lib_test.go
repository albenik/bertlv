package bertlv_test

import (
	"testing"

	"github.com/albenik/bertlv"
	"github.com/stretchr/testify/assert"
)

var realData = []byte{
	0x89, 0x06, 0x36, 0x32, 0x31, 0x30, 0x32, 0x39, 0x1f, 0x03, 0x0c, 0x37, 0x31, 0x37, 0x32, 0x31, 0x34, 0x38, 0x36,
	0x38, 0x30, 0x31, 0x31, 0x9f, 0x1c, 0x08, 0x50, 0x30, 0x31, 0x30, 0x35, 0x39, 0x39, 0x34, 0x4f, 0x07, 0xa0, 0x00,
	0x00, 0x00, 0x03, 0x10, 0x10, 0x50, 0x0a, 0x56, 0x69, 0x73, 0x61, 0x20, 0x44, 0x65, 0x62, 0x69, 0x74, 0x95, 0x05,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x26, 0x04, 0x56, 0x49, 0x53, 0x41, 0x1f, 0x08, 0x03, 0x14, 0x37, 0x46, 0x1f,
	0x09, 0x02, 0x06, 0x21, 0x5a, 0x08, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0x96, 0x03, 0x5f, 0x24, 0x03, 0x21, 0x01,
	0x31, 0x1f, 0x0a, 0x04, 0xab, 0x3e, 0x0d, 0x00, 0x1f, 0x1d, 0x07, 0x20, 0x17, 0x06, 0x21, 0x14, 0x37, 0x46, 0x1f,
	0x06, 0x02, 0x02, 0x00, 0x1f, 0x6e, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x9f, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x1f, 0x1e, 0x0c, 0x39, 0x39, 0x39, 0x39, 0x39,
	0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x2a, 0x02, 0x04, 0x98, 0x1f, 0x6c, 0x01, 0x00, 0x1f, 0x81, 0x70,
	0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x71, 0x04, 0x00,
	0x00, 0x00, 0x00, 0x1f, 0x81, 0x72, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x1f, 0x81, 0x73, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x74, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x75, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x76, 0x0d,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x81, 0x77, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x1f, 0x06, 0x02, 0x02, 0x00, 0x1f, 0x47, 0x10, 0x30, 0x31, 0x34, 0x39, 0x35, 0x30, 0x30, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x9f, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x5f, 0x20, 0x00,
	0x1f, 0x0b, 0x04, 0x01, 0x00, 0x00, 0x00, 0x1f, 0x29, 0x01, 0x01,
}

type tlv struct {
	tag, val, tlv []byte
}

var testtlvs = []tlv{
	{tag: []byte{0x4F}, val: []byte{0x11}, tlv: []byte{0x4F, 0x01, 0x11}},
	{tag: []byte{0x5F, 0x20}, val: make([]byte, 0xFF), tlv: append([]byte{0x5F, 0x20, 0x81, 0xFF}, make([]byte, 0xFF)...)},
}

func TestEncodeDecode(t *testing.T) {
	for n, rec := range testtlvs {
		const msg = "Record %d"
		enc := bertlv.Encode(rec.tag, rec.val)
		assert.Equal(t, rec.tlv, enc, msg, n)
		ln, tag, err := bertlv.Decode(enc)
		assert.NoError(t, err)
		assert.Equal(t, len(rec.tlv), ln, msg, n)
		assert.Equal(t, rec.tag, tag.Tag, msg, n)
		assert.Equal(t, rec.val, tag.Value, msg, n)
	}
}

func TestDecode_RealData(t *testing.T) {
	n := 0
	for n < len(realData) {
		if ln, _, err := bertlv.Decode(realData[n:]); err == nil {
			if !assert.NoError(t, err) {
				t.FailNow()
			}
			n += ln
		} else {
			t.Fatal(err)
		}
	}
	assert.Equal(t, len(realData), n)
}
